/**
 * ‚ú® Version.js Ïùò Î≤ÑÏ†Ñ Í∞íÏùÑ Î∞∞Ìè¨ÎÇ¥Ïó≠ Ï§ë Ï†ÅÏö©ÎêòÏßÄ ÏïäÏùÄ Í∞ÄÏû• ÏµúÍ∑º Î≤ÑÏ†ÑÏúºÎ°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 *
 * üü© ÏÇ¨Ïö©Î∞©Î≤ï
 *
 *      CMDÏóêÏÑú versionUpdate.js Í∞Ä ÏúÑÏπòÌïú Í≤ΩÎ°úÎ°ú Ïù¥Îèô
 *
 *      node versionUpdate.js
 *
 *      Î™ÖÎ†πÏñ¥Î•º Ïã§ÌñâÌïòÎ©¥ Version.jsÏùò Î≤ÑÏ†Ñ Í∞íÏù¥ Î∞∞Ìè¨ÎÇ¥Ïó≠ Ï§ë Ï†ÅÏö©ÎêòÏßÄ ÏïäÏùÄ Í∞ÄÏû• ÏµúÍ∑º Î≤ÑÏ†ÑÏúºÎ°ú Î≥ÄÍ≤ΩÎê©ÎãàÎã§.
 *
 * üü• Ï£ºÏùòÏÇ¨Ìï≠(Î∞∞Ìè¨ÏàúÏÑú)
 *
 *      [1] WebÏóêÏÑú Î∞∞Ìè¨ÎÇ¥Ïö© ÏûëÏÑ± -> BEÏóê Ïã†Í∑ú Î≤ÑÏ†ÑÏù¥ ÏûêÎèô ÏÉùÏÑ±ÎêòÍ∏∞ ÎïåÎ¨∏
 *
 *      [2] node versionUpdate.js Ïã§Ìñâ -> BEÏóê ÏÉùÏÑ±Îêú Ïã†Í∑ú Î≤ÑÏ†ÑÏùÑ Version.jsÏóê Í∞±Ïã†
 *
 *      [3] npm run build
 *
 *      [4] ÌîÑÎ°†Ìä∏ ÏÑúÎ≤ÑÏóê build ÌååÏùº ÏòÆÍ≤®ÏÑú Î∞∞Ìè¨
 *
 */
const restURI = require("./json/restURI.json");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

async function getVersion() {
  try {
    axios.defaults.baseURL = "http://51.73.47.26:3000";

    const result = await axios.get(restURI.buildReportLatestNotApply);

    if (result && result.data && result.data.data && result.data.data.rows) {
      console.log("Received Version: ", result.data.data.rows[0].version);
      return result.data.data.rows[0].version;
    } else {
      console.log("No version data received.");
      return null;
    }
  } catch (err) {
    console.error("Error fetching version: ", err);
    return null;
  }
}

function generateVersionFile(dirPath) {
  getVersion().then((version) => {
    if (!version) {
      console.error("No version to write.");
      return;
    }

    const versionContent = `export const Version = "${version}";`;

    const versionFilePath = path.join(dirPath, "Version.js");

    try {
      fs.writeFileSync(versionFilePath, versionContent);
      console.log("Version.js file generated successfully.");
    } catch (writeErr) {
      console.error("Error writing to Version.js: ", writeErr);
    }
  });
}

const srcPath = "./"; // src Ìè¥Îçî Í≤ΩÎ°ú
generateVersionFile(srcPath);

module.exports = generateVersionFile;
